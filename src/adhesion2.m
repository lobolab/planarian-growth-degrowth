% Mechanistic Regulation Of Planarian Shape During Growth And Degrowth
% (c) Lobo Lab - lobo@umbc.edu

 function [adhWallX, adhWallY] = adhesion2(input, p)
% (c) Lobo Lab - lobo@umbc.edu

  d3 = size(input, 3);
  
  % dimensions in cell walls
  adhWallX = zeros(p.numSimCellWallsX, p.numSimCellWallsY, d3);
  adhWallY = zeros(p.numSimCellWallsX, p.numSimCellWallsY, d3);
  
  % Carrying capacity
  %input(input<p.cellDenCarrCapacity) = input(input<p.cellDenCarrCapacity).*(1-input(input<p.cellDenCarrCapacity)/p.cellDenCarrCapacity);
  %input(input>=p.cellDenCarrCapacity) = 0;
  
  %input = input.*(1-input/p.cellDenCarrCapacity);
  
  %lowThreshold = 0.25;
  %input = (input-lowThreshold).*(1-(input-lowThreshold)/(p.cellDenCarrCapacity-lowThreshold));
  %input(input<0) = 0;
  %input = input.*(1-input/p.cellDenCarrCapacity);
  
  
  persistent w
  persistent m
  persistent n;
  persistent m0;
  persistent n0;
  if(isempty(w))
    w = calcIntegralWeights(1/p.dx, 10, p);
    [m, n] = size(w);
    m0 = 1 + m/2;
    n0 = m0-1;
  end
  
  for i=1:m
    dm = i-m0;
    for j=1:n
      dn = j-n0;
      adhWallX(max(1, 1-dn):min(p.numSimCellsX, p.numSimCellsX-dn), ...
               max(1, 1-dm):min(p.numSimCellsY, p.numSimCellsY-dm), :) = ...
        adhWallX(max(1, 1-dn):min(p.numSimCellsX, p.numSimCellsX-dn), ...
                 max(1, 1-dm):min(p.numSimCellsY, p.numSimCellsY-dm), :) + ...
        w(i,j) * input(max(1, 1+dn):min(p.numSimCellsX, p.numSimCellsX+dn), ...
                       max(1, 1+dm):min(p.numSimCellsY, p.numSimCellsY+dm), :);
    end
  end
  
  for i=1:m
    dm = i-m0;
    for j=1:n
      dn = j-n0;
      adhWallY(max(1, 1-dm):min(p.numSimCellsX, p.numSimCellsX-dm), ...
               max(1, 1-dn):min(p.numSimCellsY, p.numSimCellsY-dn), :) = ...
        adhWallY(max(1, 1-dm):min(p.numSimCellsX, p.numSimCellsX-dm), ...
                 max(1, 1-dn):min(p.numSimCellsY, p.numSimCellsY-dn), :) + ...
        w(i,j) * input(max(1, 1+dm):min(p.numSimCellsX, p.numSimCellsX+dm), ...
                       max(1, 1+dn):min(p.numSimCellsY, p.numSimCellsY+dn), :);
    end
  end
  
  % No adhesion in ghost cells
  adhWallX([1 2 end-1 end],:) = 0;
  adhWallX(:, [1 2 end-1 end]) = 0;
  adhWallY([1 2 end-1 end],:) = 0;
  adhWallY(:, [1 2 end-1 end]) = 0;
  
  
%  
%   adhWallX(2:p.numSimCellsX-1, 2:p.numSimCellsY, :) = ...
%     w(4,3) * input(2:p.numSimCellsX-1, 2:p.numSimCellsY, :) + ... 
%     w(3,3) * input(2:p.numSimCellsX-1, 1:p.numSimCellsY-1, :) + ...
%     w(4,2) * input(1:p.numSimCellsX-2, 2:p.numSimCellsY, :) + ... 
%     w(3,2) * input(1:p.numSimCellsX-2, 1:p.numSimCellsY-1, :) + ...
%     w(4,4) * input(3:p.numSimCellsX, 2:p.numSimCellsY, :) + ... 
%     w(3,4) * input(3:p.numSimCellsX, 1:p.numSimCellsY-1, :);
%   
%   adhWallX(2:p.numSimCellsX-1, 3:p.numSimCellsY-1, :) = adhWallX(2:p.numSimCellsX-1, 3:p.numSimCellsY-1, :) + ...
%     w(5,3) * input(2:p.numSimCellsX-1, 4:p.numSimCellsY, :) + ... 
%     w(2,3) * input(2:p.numSimCellsX-1, 1:p.numSimCellsY-3, :) + ...
%     w(5,2) * input(1:p.numSimCellsX-2, 4:p.numSimCellsY, :) + ... 
%     w(2,2) * input(1:p.numSimCellsX-2, 1:p.numSimCellsY-3, :) + ...
%     w(5,4) * input(3:p.numSimCellsX, 4:p.numSimCellsY, :) + ... 
%     w(2,4) * input(3:p.numSimCellsX, 1:p.numSimCellsY-3, :);
%   
%   
%   adhWallY(2:p.numSimCellsX, 2:p.numSimCellsY-1, :) = ...
%     w(4,3) * input(2:p.numSimCellsX, 2:p.numSimCellsY-1, :) + ... 
%     w(3,3) * input(1:p.numSimCellsX-1, 2:p.numSimCellsY-1, :) + ...
%     w(4,2) * input(2:p.numSimCellsX, 1:p.numSimCellsY-2, :) + ... 
%     w(3,2) * input(1:p.numSimCellsX-1, 1:p.numSimCellsY-2, :) + ...
%     w(4,4) * input(2:p.numSimCellsX, 3:p.numSimCellsY, :) + ... 
%     w(3,4) * input(1:p.numSimCellsX-1, 3:p.numSimCellsY, :);
%   
%   adhWallY(3:p.numSimCellsX-1, 2:p.numSimCellsY-1, :) = adhWallY(3:p.numSimCellsX-1, 2:p.numSimCellsY-1, :) + ...
%     w(5,3) * input(4:p.numSimCellsX, 2:p.numSimCellsY-1, :) + ... 
%     w(2,3) * input(1:p.numSimCellsX-3, 2:p.numSimCellsY-1, :) + ...
%     w(5,2) * input(4:p.numSimCellsX, 1:p.numSimCellsY-2, :) + ... 
%     w(2,2) * input(1:p.numSimCellsX-3, 1:p.numSimCellsY-2, :) + ...
%     w(5,4) * input(4:p.numSimCellsX, 3:p.numSimCellsY, :) + ... 
%     w(2,4) * input(1:p.numSimCellsX-3, 3:p.numSimCellsY, :);
  
